from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler
import logging

logger = logging.getLogger(__name__)

# Your channel ID (get it by forwarding a message from your channel to @RawDataBot)
CHANNEL_ID = "-1001234567890"  # Replace with your actual channel ID
CHANNEL_INVITE_LINK = "https://t.me/c/1234567890"  # Replace with your actual invite link

async def start(update: Update, context: CallbackContext):
    """Send a message with an inline button to join the channel."""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("Join Our Channel", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton("I've Joined ‚úÖ", callback_data="check_membership")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã Hello {user.first_name}!\n\n"
        "To use this bot, please join our official channel first:",
        reply_markup=reply_markup
    )
    logger.info(f"Sent start message to user {user.id}")

async def button(update: Update, context: CallbackContext):
    """Handle the callback from the inline buttons."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_membership":
        # Check if user is member of channel using ID
        try:
            member = await context.bot.get_chat_member(
                chat_id=CHANNEL_ID,
                user_id=query.from_user.id
            )
            if member.status in ["member", "administrator", "creator"]:
                await query.edit_message_text(
                    "üéâ Thanks for joining!\n\n"
                    "üìÅ *File Sequence Bot*\n\n"
                    "This bot helps you organize files in sequence:\n"
                    "1. Start with /startsequence\n"
                    "2. Send files one by one\n"
                    "3. Finish with /endsequence\n\n"
                    "All captions will be formatted in *bold* automatically!",
                    parse_mode="Markdown"
                )
                logger.info(f"User {query.from_user.id} verified membership")
            else:
                await query.edit_message_text(
                    "‚ùå You haven't joined our channel yet!\n\n"
                    "Please join the channel first to use this bot.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("Join Channel", url=CHANNEL_INVITE_LINK)],
                        [InlineKeyboardButton("Check Again", callback_data="check_membership")]
                    ])
                )
        except Exception as e:
            logger.error(f"Error checking membership: {e}")
            await query.edit_message_text(
                "‚ö†Ô∏è Couldn't verify your membership. Please try again later."
            )

# Handler registration
start_handler = CommandHandler('start', start)
button_handler = CallbackQueryHandler(button)
